{
  "_metadata": {
    "file_version": "v3.1-3d-10-1",
    "last_modified": "2025-08-13",
    "clean_architecture": "v3.1 Compliant",
    "configuration_version": "3d.1",
    "description": "Server infrastructure configuration for NLP crisis detection system",
    "created_date": "2025-08-12",
    "updated_date": "2025-08-12",
    "compliance": "Clean Architecture v3.1 Standards",
    "manager": "ServerConfigManager",
    "environment_overrides": {
      "description": "All server settings support environment variable overrides",
      "pattern": "${NLP_SERVER_*CATEGORY*_*SETTING*}",
      "examples": [
        "NLP_SERVER_NETWORK_HOST",
        "NLP_SERVER_NETWORK_PORT",
        "NLP_SERVER_SECURITY_RATE_LIMIT_ENABLE"
      ]
    }
  },

  "server_configuration": {
    "network_settings": {
      "description": "Network configuration for server binding and access",
      "host": "${NLP_SERVER_NETWORK_HOST}",
      "port": "${NLP_SERVER_NETWORK_PORT}",
      "enable_ssl": "${NLP_SERVER_NETWORK_ENABLE_SSL}",
      "ssl_cert_path": "${NLP_SERVER_NETWORK_SSL_CERT_PATH}",
      "ssl_key_path": "${NLP_SERVER_NETWORK_SSL_KEY_PATH}",
      "defaults": {
        "host": "0.0.0.0",
        "port": 8881,
        "enable_ssl": false,
        "ssl_cert_path": "./certs/server.crt",
        "ssl_key_path": "./certs/server.key"
      },
      "validation": {
        "host": {
          "type": "string",
          "pattern": "^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|0\\.0\\.0\\.0|localhost)$",
          "description": "Server host IP address or hostname"
        },
        "port": {
          "type": "integer",
          "range": [1024, 65535],
          "description": "Server port number"
        },
        "enable_ssl": {
          "type": "boolean",
          "description": "Enable SSL/TLS encryption"
        },
        "ssl_cert_path": {
          "type": "string",
          "description": "Path to SSL certificate file"
        },
        "ssl_key_path": {
          "type": "string",
          "description": "Path to SSL private key file"
        }
      }
    },

    "application_settings": {
      "description": "Application-level configuration and behavior settings",
      "debug_mode": "${NLP_SERVER_APPLICATION_DEBUG_MODE}",
      "workers": "${NLP_SERVER_APPLICATION_WORKERS}",
      "reload_on_changes": "${NLP_SERVER_APPLICATION_RELOAD_ON_CHANGES}",
      "access_log": "${NLP_SERVER_APPLICATION_ACCESS_LOG}",
      "error_log": "${NLP_SERVER_APPLICATION_ERROR_LOG}",
      "defaults": {
        "debug_mode": false,
        "workers": 1,
        "reload_on_changes": false,
        "access_log": true,
        "error_log": true
      },
      "validation": {
        "debug_mode": {
          "type": "boolean",
          "description": "Enable debug mode (development only)"
        },
        "workers": {
          "type": "integer",
          "range": [1, 16],
          "description": "Number of worker processes"
        },
        "reload_on_changes": {
          "type": "boolean",
          "description": "Auto-reload server on code changes"
        },
        "access_log": {
          "type": "boolean",
          "description": "Enable access request logging"
        },
        "error_log": {
          "type": "boolean",
          "description": "Enable error logging"
        }
      }
    },

    "performance_settings": {
      "description": "Server performance and resource management settings",
      "max_concurrent_requests": "${NLP_SERVER_PERFORMANCE_MAX_CONCURRENT_REQUESTS}",
      "request_timeout": "${NLP_SERVER_PERFORMANCE_REQUEST_TIMEOUT}",
      "worker_timeout": "${NLP_SERVER_PERFORMANCE_WORKER_TIMEOUT}",
      "keep_alive_timeout": "${NLP_SERVER_PERFORMANCE_KEEP_ALIVE_TIMEOUT}",
      "max_request_size": "${NLP_SERVER_PERFORMANCE_MAX_REQUEST_SIZE}",
      "defaults": {
        "max_concurrent_requests": 20,
        "request_timeout": 40,
        "worker_timeout": 60,
        "keep_alive_timeout": 2,
        "max_request_size": "10MB"
      },
      "validation": {
        "max_concurrent_requests": {
          "type": "integer",
          "range": [1, 1000],
          "description": "Maximum concurrent HTTP requests"
        },
        "request_timeout": {
          "type": "integer",
          "range": [5, 300],
          "unit": "seconds",
          "description": "HTTP request timeout"
        },
        "worker_timeout": {
          "type": "integer",
          "range": [10, 600],
          "unit": "seconds",
          "description": "Worker process timeout"
        },
        "keep_alive_timeout": {
          "type": "integer",
          "range": [1, 30],
          "unit": "seconds",
          "description": "HTTP keep-alive timeout"
        },
        "max_request_size": {
          "type": "string",
          "pattern": "^\\d+[KMG]B$",
          "description": "Maximum HTTP request body size"
        }
      }
    },

    "security_settings": {
      "description": "Security configuration and access control settings",
      "rate_limiting": {
        "description": "Rate limiting configuration for API endpoints",
        "enable_rate_limiting": "${NLP_SERVER_SECURITY_RATE_LIMIT_ENABLE}",
        "requests_per_minute": "${NLP_SERVER_SECURITY_RATE_LIMIT_PER_MINUTE}",
        "requests_per_hour": "${NLP_SERVER_SECURITY_RATE_LIMIT_PER_HOUR}",
        "burst_size": "${NLP_SERVER_SECURITY_RATE_LIMIT_BURST_SIZE}",
        "defaults": {
          "enable_rate_limiting": true,
          "requests_per_minute": 60,
          "requests_per_hour": 1000,
          "burst_size": 100
        },
        "validation": {
          "enable_rate_limiting": {
            "type": "boolean",
            "description": "Enable API rate limiting"
          },
          "requests_per_minute": {
            "type": "integer",
            "range": [10, 1000],
            "description": "Maximum requests per minute per client"
          },
          "requests_per_hour": {
            "type": "integer",
            "range": [100, 10000],
            "description": "Maximum requests per hour per client"
          },
          "burst_size": {
            "type": "integer",
            "range": [10, 500],
            "description": "Maximum burst requests allowed"
          }
        }
      },
      "cors": {
        "description": "Cross-Origin Resource Sharing (CORS) configuration",
        "enable_cors": "${NLP_SERVER_SECURITY_CORS_ENABLE}",
        "allowed_origins": "${NLP_SERVER_SECURITY_CORS_ALLOWED_ORIGINS}",
        "allowed_methods": "${NLP_SERVER_SECURITY_CORS_ALLOWED_METHODS}",
        "allowed_headers": "${NLP_SERVER_SECURITY_CORS_ALLOWED_HEADERS}",
        "defaults": {
          "enable_cors": true,
          "allowed_origins": ["*"],
          "allowed_methods": ["GET", "POST", "OPTIONS"],
          "allowed_headers": ["Content-Type", "Authorization"]
        },
        "validation": {
          "enable_cors": {
            "type": "boolean",
            "description": "Enable CORS support"
          },
          "allowed_origins": {
            "type": "array",
            "description": "List of allowed origin domains"
          },
          "allowed_methods": {
            "type": "array",
            "description": "List of allowed HTTP methods"
          },
          "allowed_headers": {
            "type": "array",
            "description": "List of allowed HTTP headers"
          }
        }
      }
    }
  },

  "deployment_profiles": {
    "description": "Pre-configured deployment profiles for different environments",
    "development": {
      "description": "Development environment with debugging enabled",
      "debug_mode": true,
      "workers": 1,
      "reload_on_changes": true,
      "enable_ssl": false,
      "enable_rate_limiting": false
    },
    "testing": {
      "description": "Testing environment with moderate security",
      "debug_mode": false,
      "workers": 2,
      "reload_on_changes": false,
      "enable_ssl": false,
      "enable_rate_limiting": true
    },
    "staging": {
      "description": "Staging environment mimicking production",
      "debug_mode": false,
      "workers": 4,
      "reload_on_changes": false,
      "enable_ssl": true,
      "enable_rate_limiting": true
    },
    "production": {
      "description": "Production environment with full security",
      "debug_mode": false,
      "workers": 8,
      "reload_on_changes": false,
      "enable_ssl": true,
      "enable_rate_limiting": true
    }
  },

  "monitoring": {
    "description": "Server monitoring and health check configuration",
    "health_check_endpoint": "/health",
    "metrics_endpoint": "/metrics",
    "status_endpoint": "/status",
    "enable_health_checks": true,
    "health_check_interval": 30,
    "log_health_status": true
  },

  "usage_instructions": {
    "description": "Configuration usage and integration guidelines",
    "manager_integration": "Use ServerConfigManager with create_server_config_manager(config_manager)",
    "environment_override_pattern": "Set environment variables using NLP_SERVER_*CATEGORY*_*SETTING* pattern",
    "resilient_operation": "System falls back to safe defaults when configuration is invalid or missing",
    "ssl_setup": "For SSL, ensure certificate and key files exist at specified paths",
    "rate_limiting_notes": "Rate limiting applies per client IP address",
    "cors_security": "Use specific origins instead of '*' for production security",
    "worker_scaling": "Adjust worker count based on CPU cores and expected load",
    "production_checklist": "Disable debug_mode, enable SSL, configure proper rate limits"
  }
}