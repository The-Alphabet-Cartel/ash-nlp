{
  "_metadata": {
    "file_version": "v3.1-3d-10-1",
    "last_modified": "2025-08-13",
    "clean_architecture": "v3.1 Compliant",
    "configuration_version": "3d.1",
    "description": "Machine learning system configuration for adaptive NLP crisis detection (Future Implementation)",
    "created_date": "2025-08-12",
    "updated_date": "2025-08-12",
    "compliance": "Clean Architecture v3.1 Standards",
    "consolidation_source": "learning_parameters.json + learning_settings.json",
    "status": "future_ready",
    "managers": ["AnalysisParametersManager", "LearningSystem"],
    "environment_overrides": {
      "description": "All learning settings support environment variable overrides",
      "pattern": "${NLP_LEARNING_*CATEGORY*_*SETTING*}",
      "examples": [
        "NLP_LEARNING_SYSTEM_ENABLE",
        "NLP_LEARNING_ALGORITHM_LEARNING_RATE",
        "NLP_LEARNING_ADAPTATION_MIN_CONFIDENCE_ADJUSTMENT"
      ]
    }
  },

  "learning_configuration": {
    "system_settings": {
      "description": "Core learning system activation and control settings",
      "enable": "${NLP_LEARNING_SYSTEM_ENABLE}",
      "global_enable": "${GLOBAL_ENABLE_LEARNING_SYSTEM}",
      "learning_mode": "${NLP_LEARNING_SYSTEM_LEARNING_MODE}",
      "auto_adaptation": "${NLP_LEARNING_SYSTEM_AUTO_ADAPTATION}",
      "require_human_approval": "${NLP_LEARNING_SYSTEM_REQUIRE_HUMAN_APPROVAL}",
      "defaults": {
        "enable": true,
        "global_enable": true,
        "learning_mode": "supervised",
        "auto_adaptation": false,
        "require_human_approval": true
      },
      "validation": {
        "enable": {
          "type": "boolean",
          "description": "Enable the machine learning adaptation system"
        },
        "global_enable": {
          "type": "boolean",
          "description": "Global ecosystem learning system enabler (preserved for compatibility)"
        },
        "learning_mode": {
          "type": "string",
          "allowed_values": ["supervised", "semi_supervised", "unsupervised"],
          "description": "Learning algorithm mode for adaptation"
        },
        "auto_adaptation": {
          "type": "boolean",
          "description": "Enable automatic adaptation without human review"
        },
        "require_human_approval": {
          "type": "boolean",
          "description": "Require human approval for all learning adaptations"
        }
      }
    },

    "algorithm_parameters": {
      "description": "Core machine learning algorithm parameters",
      "learning_rate": "${NLP_LEARNING_ALGORITHM_LEARNING_RATE}",
      "momentum": "${NLP_LEARNING_ALGORITHM_MOMENTUM}",
      "decay_rate": "${NLP_LEARNING_ALGORITHM_DECAY_RATE}",
      "regularization": "${NLP_LEARNING_ALGORITHM_REGULARIZATION}",
      "batch_size": "${NLP_LEARNING_ALGORITHM_BATCH_SIZE}",
      "epoch_limit": "${NLP_LEARNING_ALGORITHM_EPOCH_LIMIT}",
      "convergence_threshold": "${NLP_LEARNING_ALGORITHM_CONVERGENCE_THRESHOLD}",
      "defaults": {
        "learning_rate": 0.01,
        "momentum": 0.9,
        "decay_rate": 0.95,
        "regularization": 0.001,
        "batch_size": 32,
        "epoch_limit": 100,
        "convergence_threshold": 0.001
      },
      "validation": {
        "learning_rate": {
          "type": "float",
          "range": [0.0001, 1.0],
          "description": "Learning rate for gradient descent optimization"
        },
        "momentum": {
          "type": "float",
          "range": [0.0, 1.0],
          "description": "Momentum factor for gradient descent"
        },
        "decay_rate": {
          "type": "float",
          "range": [0.1, 1.0],
          "description": "Learning rate decay factor per epoch"
        },
        "regularization": {
          "type": "float",
          "range": [0.0, 1.0],
          "description": "L2 regularization factor to prevent overfitting"
        },
        "batch_size": {
          "type": "integer",
          "range": [1, 1000],
          "description": "Number of samples per training batch"
        },
        "epoch_limit": {
          "type": "integer",
          "range": [1, 1000],
          "description": "Maximum number of training epochs"
        },
        "convergence_threshold": {
          "type": "float",
          "range": [0.0001, 0.1],
          "description": "Convergence threshold for early stopping"
        }
      }
    },

    "threshold_adaptation": {
      "description": "Adaptive threshold adjustment parameters",
      "min_confidence_adjustment": "${NLP_LEARNING_ADAPTATION_MIN_CONFIDENCE_ADJUSTMENT}",
      "max_confidence_adjustment": "${NLP_LEARNING_ADAPTATION_MAX_CONFIDENCE_ADJUSTMENT}",
      "adjustment_step_size": "${NLP_LEARNING_ADAPTATION_ADJUSTMENT_STEP_SIZE}",
      "sensitivity_bounds": {
        "description": "Global sensitivity bounds for safety",
        "min_global_sensitivity": "${NLP_LEARNING_ADAPTATION_MIN_GLOBAL_SENSITIVITY}",
        "max_global_sensitivity": "${NLP_LEARNING_ADAPTATION_MAX_GLOBAL_SENSITIVITY}"
      },
      "defaults": {
        "min_confidence_adjustment": 0.05,
        "max_confidence_adjustment": 0.30,
        "adjustment_step_size": 0.01,
        "sensitivity_bounds": {
          "min_global_sensitivity": 0.5,
          "max_global_sensitivity": 1.5
        }
      },
      "validation": {
        "min_confidence_adjustment": {
          "type": "float",
          "range": [0.01, 0.5],
          "description": "Minimum confidence adjustment per adaptation cycle"
        },
        "max_confidence_adjustment": {
          "type": "float",
          "range": [0.1, 1.0],
          "description": "Maximum confidence adjustment per adaptation cycle"
        },
        "adjustment_step_size": {
          "type": "float",
          "range": [0.001, 0.1],
          "description": "Step size for incremental threshold adjustments"
        },
        "sensitivity_bounds": {
          "min_global_sensitivity": {
            "type": "float",
            "range": [0.1, 1.0],
            "description": "Minimum allowed global sensitivity multiplier"
          },
          "max_global_sensitivity": {
            "type": "float",
            "range": [1.0, 3.0],
            "description": "Maximum allowed global sensitivity multiplier"
          }
        }
      }
    },

    "feedback_processing": {
      "description": "Human feedback processing and incorporation parameters",
      "feedback_weight": "${NLP_LEARNING_FEEDBACK_FEEDBACK_WEIGHT}",
      "min_feedback_samples": "${NLP_LEARNING_FEEDBACK_MIN_FEEDBACK_SAMPLES}",
      "feedback_confidence_threshold": "${NLP_LEARNING_FEEDBACK_CONFIDENCE_THRESHOLD}",
      "false_positive_factor": "${NLP_LEARNING_FEEDBACK_FALSE_POSITIVE_FACTOR}",
      "false_negative_factor": "${NLP_LEARNING_FEEDBACK_FALSE_NEGATIVE_FACTOR}",
      "staff_review_weight": "${NLP_LEARNING_FEEDBACK_STAFF_REVIEW_WEIGHT}",
      "defaults": {
        "feedback_weight": 0.1,
        "min_feedback_samples": 5,
        "feedback_confidence_threshold": 0.7,
        "false_positive_factor": -0.1,
        "false_negative_factor": 0.1,
        "staff_review_weight": 0.8
      },
      "validation": {
        "feedback_weight": {
          "type": "float",
          "range": [0.01, 1.0],
          "description": "Weight given to human feedback in learning algorithm"
        },
        "min_feedback_samples": {
          "type": "integer",
          "range": [1, 100],
          "description": "Minimum feedback samples required before adaptation"
        },
        "feedback_confidence_threshold": {
          "type": "float",
          "range": [0.5, 1.0],
          "description": "Confidence threshold for accepting feedback"
        },
        "false_positive_factor": {
          "type": "float",
          "range": [-1.0, 0.0],
          "description": "Adjustment factor for false positive feedback (negative reduces sensitivity)"
        },
        "false_negative_factor": {
          "type": "float",
          "range": [0.0, 1.0],
          "description": "Adjustment factor for false negative feedback (positive increases sensitivity)"
        },
        "staff_review_weight": {
          "type": "float",
          "range": [0.1, 1.0],
          "description": "Weight given to professional staff review feedback"
        }
      }
    },

    "safety_constraints": {
      "description": "Safety constraints and limits for learning system",
      "max_adjustments_per_day": "${NLP_LEARNING_SAFETY_MAX_ADJUSTMENTS_PER_DAY}",
      "max_adjustments_per_week": "${NLP_LEARNING_SAFETY_MAX_ADJUSTMENTS_PER_WEEK}",
      "adjustment_limit": "${NLP_LEARNING_SAFETY_ADJUSTMENT_LIMIT}",
      "max_drift": "${NLP_LEARNING_SAFETY_MAX_DRIFT}",
      "rollback_threshold": "${NLP_LEARNING_SAFETY_ROLLBACK_THRESHOLD}",
      "emergency_stop": "${NLP_LEARNING_SAFETY_EMERGENCY_STOP}",
      "defaults": {
        "max_adjustments_per_day": 50,
        "max_adjustments_per_week": 200,
        "adjustment_limit": 0.05,
        "max_drift": 0.1,
        "rollback_threshold": 0.8,
        "emergency_stop": false
      },
      "validation": {
        "max_adjustments_per_day": {
          "type": "integer",
          "range": [1, 500],
          "description": "Maximum threshold adjustments allowed per day"
        },
        "max_adjustments_per_week": {
          "type": "integer",
          "range": [10, 2000],
          "description": "Maximum threshold adjustments allowed per week"
        },
        "adjustment_limit": {
          "type": "float",
          "range": [0.01, 0.5],
          "description": "Maximum single adjustment magnitude"
        },
        "max_drift": {
          "type": "float",
          "range": [0.05, 1.0],
          "description": "Maximum allowable drift from original thresholds"
        },
        "rollback_threshold": {
          "type": "float",
          "range": [0.5, 1.0],
          "description": "Performance threshold below which to trigger rollback"
        },
        "emergency_stop": {
          "type": "boolean",
          "description": "Emergency stop flag to halt all learning immediately"
        }
      }
    },

    "severity_multipliers": {
      "description": "Severity-based adjustment multipliers for different crisis levels",
      "high_severity": "${NLP_LEARNING_SEVERITY_HIGH_SEVERITY}",
      "medium_severity": "${NLP_LEARNING_SEVERITY_MEDIUM_SEVERITY}",
      "low_severity": "${NLP_LEARNING_SEVERITY_LOW_SEVERITY}",
      "community_specific": "${NLP_LEARNING_SEVERITY_COMMUNITY_SPECIFIC}",
      "defaults": {
        "high_severity": 3.0,
        "medium_severity": 2.0,
        "low_severity": 1.0,
        "community_specific": 1.5
      },
      "validation": {
        "high_severity": {
          "type": "float",
          "range": [1.0, 10.0],
          "description": "Learning rate multiplier for high severity cases"
        },
        "medium_severity": {
          "type": "float",
          "range": [1.0, 5.0],
          "description": "Learning rate multiplier for medium severity cases"
        },
        "low_severity": {
          "type": "float",
          "range": [0.5, 2.0],
          "description": "Learning rate multiplier for low severity cases"
        },
        "community_specific": {
          "type": "float",
          "range": [1.0, 3.0],
          "description": "Learning rate multiplier for LGBTQIA+ community specific patterns"
        }
      }
    },

    "data_management": {
      "description": "Learning data storage and management settings",
      "persistence_file": "${NLP_LEARNING_DATA_PERSISTENCE_FILE}",
      "backup_learning_data": "${NLP_LEARNING_DATA_BACKUP_LEARNING_DATA}",
      "data_retention_days": "${NLP_LEARNING_DATA_DATA_RETENTION_DAYS}",
      "enable_data_encryption": "${NLP_LEARNING_DATA_ENABLE_DATA_ENCRYPTION}",
      "learning_log_level": "${NLP_LEARNING_DATA_LEARNING_LOG_LEVEL}",
      "export_format": "${NLP_LEARNING_DATA_EXPORT_FORMAT}",
      "defaults": {
        "persistence_file": "./learning_data/learning_adjustments.json",
        "backup_learning_data": true,
        "data_retention_days": 365,
        "enable_data_encryption": true,
        "learning_log_level": "INFO",
        "export_format": "json"
      },
      "validation": {
        "persistence_file": {
          "type": "string",
          "required": true,
          "description": "File path for learning adjustment persistence"
        },
        "backup_learning_data": {
          "type": "boolean",
          "description": "Enable automatic backup of learning data"
        },
        "data_retention_days": {
          "type": "integer",
          "range": [30, 3650],
          "description": "Number of days to retain learning data"
        },
        "enable_data_encryption": {
          "type": "boolean",
          "description": "Enable encryption for sensitive learning data"
        },
        "learning_log_level": {
          "type": "string",
          "allowed_values": ["DEBUG", "INFO", "WARNING", "ERROR"],
          "description": "Logging level for learning system activities"
        },
        "export_format": {
          "type": "string",
          "allowed_values": ["json", "csv", "xml"],
          "description": "Format for learning data exports"
        }
      }
    },

    "performance_monitoring": {
      "description": "Learning system performance monitoring and metrics",
      "enable_performance_tracking": "${NLP_LEARNING_MONITORING_ENABLE_PERFORMANCE_TRACKING}",
      "metrics_collection_interval": "${NLP_LEARNING_MONITORING_METRICS_COLLECTION_INTERVAL}",
      "performance_alert_threshold": "${NLP_LEARNING_MONITORING_PERFORMANCE_ALERT_THRESHOLD}",
      "accuracy_degradation_limit": "${NLP_LEARNING_MONITORING_ACCURACY_DEGRADATION_LIMIT}",
      "enable_a_b_testing": "${NLP_LEARNING_MONITORING_ENABLE_A_B_TESTING}",
      "defaults": {
        "enable_performance_tracking": true,
        "metrics_collection_interval": 3600,
        "performance_alert_threshold": 0.85,
        "accuracy_degradation_limit": 0.1,
        "enable_a_b_testing": false
      },
      "validation": {
        "enable_performance_tracking": {
          "type": "boolean",
          "description": "Enable performance tracking for learning system"
        },
        "metrics_collection_interval": {
          "type": "integer",
          "range": [300, 86400],
          "unit": "seconds",
          "description": "Interval for collecting performance metrics"
        },
        "performance_alert_threshold": {
          "type": "float",
          "range": [0.5, 1.0],
          "description": "Performance threshold below which to send alerts"
        },
        "accuracy_degradation_limit": {
          "type": "float",
          "range": [0.05, 0.5],
          "description": "Maximum allowed accuracy degradation before rollback"
        },
        "enable_a_b_testing": {
          "type": "boolean",
          "description": "Enable A/B testing for learning algorithm variants"
        }
      }
    }
  },

  "learning_profiles": {
    "description": "Pre-configured learning profiles for different deployment scenarios",
    "conservative": {
      "description": "Conservative learning with human oversight",
      "auto_adaptation": false,
      "require_human_approval": true,
      "learning_rate": 0.005,
      "max_adjustments_per_day": 10,
      "adjustment_limit": 0.02
    },
    "balanced": {
      "description": "Balanced learning with moderate automation",
      "auto_adaptation": false,
      "require_human_approval": true,
      "learning_rate": 0.01,
      "max_adjustments_per_day": 50,
      "adjustment_limit": 0.05
    },
    "aggressive": {
      "description": "Aggressive learning with more automation",
      "auto_adaptation": true,
      "require_human_approval": false,
      "learning_rate": 0.02,
      "max_adjustments_per_day": 100,
      "adjustment_limit": 0.1
    },
    "community_focused": {
      "description": "Learning optimized for LGBTQIA+ community patterns",
      "auto_adaptation": false,
      "require_human_approval": true,
      "learning_rate": 0.01,
      "community_specific": 2.0,
      "staff_review_weight": 0.9
    }
  },

  "future_implementation": {
    "description": "Future learning system implementation roadmap",
    "phase_1": {
      "description": "Basic threshold adaptation with human feedback",
      "features": ["threshold_adjustment", "human_feedback", "safety_constraints"],
      "estimated_complexity": "medium",
      "dependencies": ["staff_review_system", "feedback_collection"]
    },
    "phase_2": {
      "description": "Pattern learning and community-specific adaptation",
      "features": ["pattern_learning", "community_vocabulary_learning", "temporal_pattern_adaptation"],
      "estimated_complexity": "high",
      "dependencies": ["phase_1", "advanced_pattern_analysis"]
    },
    "phase_3": {
      "description": "Advanced ML with automated adaptation",
      "features": ["auto_adaptation", "a_b_testing", "ensemble_learning"],
      "estimated_complexity": "very_high",
      "dependencies": ["phase_2", "comprehensive_monitoring"]
    }
  },

  "usage_instructions": {
    "description": "Configuration usage and integration guidelines",
    "manager_integration": "Use AnalysisParametersManager.get_learning_system_parameters() for access",
    "environment_override_pattern": "Set environment variables using NLP_LEARNING_*CATEGORY*_*SETTING* pattern",
    "resilient_operation": "System falls back to safe defaults when configuration is invalid or missing",
    "global_enable_preservation": "GLOBAL_ENABLE_LEARNING_SYSTEM preserved for ecosystem compatibility",
    "safety_first": "All learning operations respect safety constraints and require human oversight",
    "future_ready": "Configuration structured for future machine learning implementation",
    "community_focus": "Specialized settings for LGBTQIA+ community crisis detection patterns",
    "production_notes": "Use 'conservative' or 'balanced' profiles for production deployments"
  }
}